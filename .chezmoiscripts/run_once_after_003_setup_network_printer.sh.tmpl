#!/usr/bin/env sh

# Script: run_once_after_004_setup_network_printer.sh.tmpl
# Purpose: Install and configure Samsung M2070 Series network printer and scanner
# Requirements: Arch Linux

{{ includeTemplate "log_start" "Setting up Samsung M2070 Series printer and scanner..." }}

# Set strict error handling
set -euo pipefail

# Printer configuration
PRINTER_NAME="Samsung_M2070_Series"
PRINTER_IP="192.168.1.40"
PRINTER_MODEL="Samsung M2070 Series"
PRINTER_DESCRIPTION="Samsung M2070 Series Network Printer"

# Check if package is installed
is_package_installed() {
    local package="$1"
    pacman -Qi "$package" >/dev/null 2>&1 || yay -Qi "$package" >/dev/null 2>&1
}

# Check if service is enabled and running
is_service_active() {
    local service="$1"
    systemctl is-active --quiet "$service" 2>/dev/null
}

is_service_enabled() {
    local service="$1"
    systemctl is-enabled --quiet "$service" 2>/dev/null
}

# Check if printer is already configured
is_printer_configured() {
    lpstat -p "$PRINTER_NAME" >/dev/null 2>&1
}

# Check if user is in required groups
is_user_in_group() {
    local group="$1"
    groups | grep -q "\b$group\b"
}

# Add user to group if not already a member
add_user_to_group() {
    local group="$1"
    if ! is_user_in_group "$group"; then
        {{ includeTemplate "log_info" "Adding user to $group group..." }}
        sudo usermod -a -G "$group" "$USER"
        {{ includeTemplate "log_success" "User added to $group group (requires logout/login to take effect)" }}
    else
        {{ includeTemplate "log_info" "User already in $group group" }}
    fi
}

# Detect printer URI using lpinfo
detect_printer_uri() {
    # Try different protocols (without logging to avoid output capture issues)
    local uris=(
        "ipp://$PRINTER_IP/ipp/print"
        "http://$PRINTER_IP:631/ipp/print"
        "socket://$PRINTER_IP:9100"
        "lpd://$PRINTER_IP/queue"
    )
    
    for uri in "${uris[@]}"; do
        if lpinfo -v 2>/dev/null | grep -q "$uri"; then
            echo "$uri"
            return 0
        fi
    done
    
    # Fallback to socket protocol
    echo "socket://$PRINTER_IP:9100"
}

# Configure printer
configure_printer() {
    {{ includeTemplate "log_info" "Configuring Samsung M2070 Series printer..." }}
    
    if is_printer_configured; then
        {{ includeTemplate "log_info" "Printer '$PRINTER_NAME' is already configured" }}
        return 0
    fi
    
    # Detect printer URI
    {{ includeTemplate "log_info" "Detecting printer URI..." }}
    local printer_uri
    printer_uri=$(detect_printer_uri)
    {{ includeTemplate "log_info" "Using printer URI: $printer_uri" }}
    
    # Choose driver based on connection type
    local driver_option
    if [[ "$printer_uri" == ipp://* ]] || [[ "$printer_uri" == http://* ]]; then
        {{ includeTemplate "log_info" "Using IPP Everywhere driver for IPP/HTTP connection..." }}
        driver_option="-m everywhere"
    else
        {{ includeTemplate "log_info" "Using generic PostScript driver for socket/LPD connection..." }}
        driver_option="-m drv:///sample.drv/generic.ppd"
    fi
    
    # Add printer using lpadmin
    {{ includeTemplate "log_info" "Adding printer with appropriate driver..." }}
    sudo lpadmin -p "$PRINTER_NAME" \
        -v "$printer_uri" \
        $driver_option \
        -D "$PRINTER_DESCRIPTION" \
        -L "Network Printer at $PRINTER_IP" \
        -E
    
    # Set as default printer
    sudo lpadmin -d "$PRINTER_NAME"
    
    # Accept jobs
    sudo cupsenable "$PRINTER_NAME"
    sudo cupsaccept "$PRINTER_NAME"
    
    {{ includeTemplate "log_success" "Printer configured successfully" }}
}

# Configure scanner
configure_scanner() {
    {{ includeTemplate "log_info" "Configuring network scanner..." }}

    # Check if SANE packages are installed
    if ! is_package_installed "sane-airscan"; then
        {{ includeTemplate "log_error" "sane-airscan is not installed. Scanner configuration skipped." }}
        return 1
    fi

    if ! is_package_installed "sane"; then
        {{ includeTemplate "log_error" "sane is not installed. Scanner configuration skipped." }}
        return 1
    fi

    # Configure sane-airscan with WSD protocol (primary method)
    local airscan_conf="/etc/sane.d/airscan.conf"
    {{ includeTemplate "log_info" "Configuring sane-airscan with WSD protocol..." }}

    # Backup existing configuration if it exists
    if [ -f "$airscan_conf" ]; then
        sudo cp "$airscan_conf" "${airscan_conf}.bak"
    fi

    # Create comprehensive airscan configuration with WSD on port 8018
    sudo tee "$airscan_conf" > /dev/null << 'EOF'
# Samsung M2070 Series Scanner Configuration
# Generated by chezmoi - manual WSD configuration for reliable detection

[devices]
# Manual device configuration using WSD protocol on port 8018
# Format: "Device Name" = URL, protocol
"Samsung M2070 Series" = http://192.168.1.40:8018/wsd/scan, wsd

[options]
# Enable automatic discovery as fallback
discovery = enable

# Use full WSD discovery mode (more thorough than fast mode)
ws-discovery = full

# Use network name for model identification
model = network

# Protocol preference
protocol = auto
EOF
    {{ includeTemplate "log_success" "sane-airscan configuration created with WSD support" }}

    # Configure xerox_mfp backend for Samsung M2070 network scanner (fallback method)
    local xerox_conf="/etc/sane.d/xerox_mfp.conf"
    {{ includeTemplate "log_info" "Configuring xerox_mfp backend for network scanning..." }}

    if [ -f "$xerox_conf" ]; then
        # Backup existing configuration
        sudo cp "$xerox_conf" "${xerox_conf}.bak"

        # Check if TCP entry already exists
        if ! grep -q "^tcp $PRINTER_IP" "$xerox_conf" 2>/dev/null; then
            # Add network scanner configuration at the end
            echo "" | sudo tee -a "$xerox_conf" > /dev/null
            echo "# Samsung M2070 Series - Network Scanner Configuration" | sudo tee -a "$xerox_conf" > /dev/null
            echo "# Added by chezmoi" | sudo tee -a "$xerox_conf" > /dev/null
            echo "tcp $PRINTER_IP" | sudo tee -a "$xerox_conf" > /dev/null
            {{ includeTemplate "log_success" "xerox_mfp network configuration added" }}
        else
            {{ includeTemplate "log_info" "xerox_mfp network configuration already exists" }}
        fi
    else
        {{ includeTemplate "log_error" "xerox_mfp.conf not found - skipping native backend configuration" }}
    fi

    # Test scanner detection with both backends
    {{ includeTemplate "log_info" "Testing scanner detection with multiple backends..." }}

    # Give SANE a moment to refresh
    sleep 2

    # Test airscan backend specifically
    local airscan_found=false
    if scanimage -L 2>/dev/null | grep -qi "airscan.*samsung\|samsung.*m2070"; then
        {{ includeTemplate "log_success" "Scanner detected via airscan backend (WSD)" }}
        airscan_found=true
    fi

    # Test xerox_mfp backend specifically
    local xerox_found=false
    if SANE_DEFAULT_DEVICE="" scanimage -L 2>/dev/null | grep -qi "xerox.*$PRINTER_IP"; then
        {{ includeTemplate "log_success" "Scanner detected via xerox_mfp backend" }}
        xerox_found=true
    fi

    # Check for any scanner detection
    if scanimage -L 2>/dev/null | grep -q "$PRINTER_IP"; then
        {{ includeTemplate "log_success" "Scanner successfully configured and detected!" }}
        return 0
    else
        {{ includeTemplate "log_info" "Scanner not immediately detected - may require:" }}
        echo "  1. System restart for group permissions to take effect"
        echo "  2. CUPS service restart: sudo systemctl restart cups"
        echo "  3. Firewall configuration to allow WSD discovery"
        echo "  4. Manual verification: airscan-discover"
        return 0
    fi
}

{{ includeTemplate "log_info" "Printer IP: $PRINTER_IP" }}

# Step 1: Verify required packages are installed
{{ includeTemplate "log_step" "Verifying required packages..." }}

required_packages=("cups" "sane-airscan" "sane" "system-config-printer")

for package in "${required_packages[@]}"; do
    if ! is_package_installed "$package"; then
        {{ includeTemplate "log_error" "Required package '$package' is not installed" }}
        {{ includeTemplate "log_error" "Please run the package installation script first" }}
        exit 1
    fi
done
{{ includeTemplate "log_success" "All required packages are installed" }}

# Step 2: Enable and start CUPS service
{{ includeTemplate "log_step" "Configuring CUPS service..." }}

if ! is_service_enabled "cups.service"; then
    {{ includeTemplate "log_info" "Enabling CUPS service..." }}
    sudo systemctl enable cups.service
fi

if ! is_service_active "cups.service"; then
    {{ includeTemplate "log_info" "Starting CUPS service..." }}
    sudo systemctl start cups.service
fi

{{ includeTemplate "log_success" "CUPS service is running" }}

# Step 3: Add user to required groups
{{ includeTemplate "log_step" "Configuring user permissions..." }}
add_user_to_group "lp"
add_user_to_group "scanner"

# Step 4: Configure printer
{{ includeTemplate "log_step" "Configuring printer..." }}
configure_printer

# Step 5: Configure scanner
{{ includeTemplate "log_step" "Configuring scanner..." }}
configure_scanner

# Step 6: Test configuration
{{ includeTemplate "log_step" "Testing configuration..." }}

# Test printer
if lpstat -p "$PRINTER_NAME" >/dev/null 2>&1; then
    {{ includeTemplate "log_success" "Printer configuration verified" }}
else
    {{ includeTemplate "log_error" "Printer configuration failed" }}
fi

# Test scanner (basic check)
if command -v scanimage >/dev/null 2>&1; then
    {{ includeTemplate "log_success" "Scanner tools available" }}
else
    {{ includeTemplate "log_error" "Scanner tools not available" }}
fi

{{ includeTemplate "log_complete" "Samsung M2070 Series setup completed!" }}

# Print summary
echo ""
echo "=== Setup Summary ==="
echo "Printer Name: $PRINTER_NAME"
echo "Printer IP: $PRINTER_IP"
echo "Printer URI: $(detect_printer_uri)"
echo ""
echo "=== Next Steps ==="
echo "1. Log out and log back in for group permissions to take effect"
echo "2. Test printing: echo 'Test page' | lp -d $PRINTER_NAME"
echo "3. Test scanning with skanpage (KDE) or simple-scan"
echo "4. Access printer settings: http://localhost:631"
echo ""
echo "=== Troubleshooting ==="
echo "- Check printer status: lpstat -p $PRINTER_NAME"
echo "- Check scanner: scanimage -L"
echo "- CUPS web interface: http://localhost:631"
echo "- Restart CUPS: sudo systemctl restart cups.service"
