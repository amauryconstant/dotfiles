#!/usr/bin/env sh

# Script: run_onchange_before_install_arch_packages.sh.tmpl
# Purpose: Install packages for Arch Linux with strategy-aware fallback
# Requirements: Arch Linux, pacman

# Hash: {{ .packages.install.arch | toJson | sha256sum }}

{{ includeTemplate "log_start" "Installing packages for Arch Linux..." }}

# Set error handling
set -euo pipefail

# Check if sophisticated package manager is available and working
use_package_manager=false
if [ -f "$HOME/.config/scripts/package-manager.sh" ] && command -v yq >/dev/null 2>&1; then
    if [ -f "$HOME/.config/shell/gum-ui.sh" ]; then
        # Test if package manager can read categories
        . "$HOME/.config/shell/gum-ui.sh" 2>/dev/null || true
        . "$HOME/.config/scripts/package-manager.sh" 2>/dev/null || true
        if package-manager health --brief >/dev/null 2>&1; then
            use_package_manager=true
            {{ includeTemplate "log_step" "Using sophisticated strategy-aware package manager..." }}
        fi
    fi
fi

if [ "$use_package_manager" = false ]; then
    {{ includeTemplate "log_step" "Using fallback installation method..." }}

    # Package installation with fallback (original logic)
    install_packages() {
        local packages="$*"
        {{ includeTemplate "log_step" "Installing: $packages" }}

        if sudo pacman -S --noconfirm --needed $packages; then
            return 0
        elif command -v yay >/dev/null 2>&1; then
            {{ includeTemplate "log_info" "Pacman failed, trying yay..." }}
            yay -S --noconfirm --needed $packages
        else
            {{ includeTemplate "log_error" "Failed to install: $packages" }}
            return 1
        fi
    }
fi

# Build list of desired packages from config
{{ includeTemplate "log_step" "Building desired package list from config..." }}
DESIRED_PACKAGES=""
{{- range $name, $config := .packages.install.arch.packages }}
{{- range $config.list }}
DESIRED_PACKAGES="${DESIRED_PACKAGES} {{ . }}"
{{- end }}
{{- end }}

# Remove conflicting packages (explicit delete list)
{{- if .packages.delete.arch }}
{{ includeTemplate "log_step" "Removing conflicting packages..." }}
if command -v yay >/dev/null 2>&1; then
    yay -R --noconfirm {{ .packages.delete.arch }} 2>/dev/null || true
else
    sudo pacman -R --noconfirm {{ .packages.delete.arch }} 2>/dev/null || true
fi
{{- end }}

# Install packages by method
if [ "$use_package_manager" = true ]; then
    # Use sophisticated package manager
    if package-manager install-all; then
        {{ includeTemplate "log_success" "All packages installed successfully using strategy system" }}
    else
        {{ includeTemplate "log_error" "Strategy-aware installation failed" }}
        exit 1
    fi
else
    # Use original category-based installation
    {{- range $name, $config := .packages.install.arch.packages }}

    {{ includeTemplate "log_step" (printf "Installing %s packages..." $name) }}
    if ! install_packages {{ join " " $config.list }}; then
        {{ includeTemplate "log_error" (printf "Failed to install %s packages" $name) }}
        exit 1
    fi
    {{- end }}
fi

# Cleanup: Remove packages managed by chezmoi but no longer in config
{{ includeTemplate "log_step" "Checking for packages to remove..." }}

# Create a state file to track what chezmoi has installed
STATE_FILE="$HOME/.local/state/chezmoi/installed_packages.txt"
mkdir -p "$(dirname "$STATE_FILE")"

# Get previously tracked packages
if [ -f "$STATE_FILE" ]; then
    PREVIOUS_PACKAGES=$(cat "$STATE_FILE")
else
    PREVIOUS_PACKAGES=""
fi

# Find packages to remove (in previous list but not in current list)
PACKAGES_TO_REMOVE=""
for pkg in $PREVIOUS_PACKAGES; do
    if ! echo "$DESIRED_PACKAGES" | grep -qw "$pkg"; then
        # Check if package is actually installed before trying to remove
        if pacman -Qi "$pkg" >/dev/null 2>&1; then
            PACKAGES_TO_REMOVE="${PACKAGES_TO_REMOVE} $pkg"
        fi
    fi
done

# Remove packages no longer in config
if [ -n "$PACKAGES_TO_REMOVE" ]; then
    {{ includeTemplate "log_progress" "Removing packages no longer in config: $PACKAGES_TO_REMOVE" }}
    if command -v yay >/dev/null 2>&1; then
        yay -R --noconfirm $PACKAGES_TO_REMOVE || {{ includeTemplate "log_error" "Failed to remove some packages" }}
    else
        sudo pacman -R --noconfirm $PACKAGES_TO_REMOVE || {{ includeTemplate "log_error" "Failed to remove some packages" }}
    fi
else
    {{ includeTemplate "log_info" "No packages to remove" }}
fi

# Update state file with current package list
echo "$DESIRED_PACKAGES" > "$STATE_FILE"

{{ includeTemplate "log_complete" "Package installation completed successfully" }}
