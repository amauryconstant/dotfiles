#!/bin/sh

{{ if eq .osId "linux-arch" }}
    {{- $destinationConfig := index .destinations .destination -}}

echo "Installing packages for destination: {{ .destination }}"
echo "Configured package categories: {{ join ", " $destinationConfig.packages }}"

# Define installation functions
install_with_pacman() {
    sudo pacman -S --noconfirm --needed "$@"
}

install_with_yay_bin() {
    # Force yay to only install pre-built packages, fail if source build required
    yay -S --noconfirm --needed --norebuild --redownload "$@"
}

install_with_yay_source() {
    # Force building from source, ignore any pre-built packages
    yay -S --noconfirm --needed --rebuild "$@"
}

# Remove conflicting packages first
echo "Removing conflicting packages..."
yay -R --noconfirm {{ .packages.delete.arch }} 2>/dev/null || true

# Install packages by category (filtered by destination)
{{ range $name, $config := .packages.install.arch.packages -}}
    {{- $strategy := $.packages.install.arch.strategies.default_strategy -}}
    {{- if hasKey $config "strategy" -}}
        {{- $strategy = $config.strategy -}}
    {{- end -}}
    {{- $packages := $config.list -}}
    
    {{- if $packages }}
# Check if {{ $name }} category is enabled for destination {{ $.destination }}
{{ if has $name $destinationConfig.packages }}
echo "Installing {{ $name }} (enabled for {{ $.destination }} destination)"
        {{- range $index, $installer := $strategy }}
            {{- if eq $index 0 }}
if install_with_{{ $installer }} {{ join " " $packages }}; then
    echo "✓ Successfully installed {{ $name }} with {{ $installer }}"
            {{- else }}
elif install_with_{{ $installer }} {{ join " " $packages }}; then
    echo "✓ Successfully installed {{ $name }} with {{ $installer }}"
            {{- end }}
        {{- end }}
else
    echo "✗ Failed to install {{ $name }} with any available method"
    exit 1
fi
{{ else }}
echo "Skipping {{ $name }} (not configured for {{ $.destination }} destination)"
{{ end }}

    {{- end }}
{{ end -}}

echo "✓ Package installation completed for {{ .destination }} destination!"

{{ else }}
    echo "ERROR: This script is only supported on Arch Linux systems"
    echo "Required: osId 'linux-arch'"
    echo "Detected: '{{ .osId }}'"
    echo "Script: $(basename "$0")"
    exit 1
{{ end }}
