#!/bin/sh

# Script: run_onchange_before_update_arch_packages.sh.tmpl
# Purpose: Update packages for Arch Linux based on destination configuration
# Requirements: Arch Linux, pacman

{{ if eq .osId "linux-arch" }}
    {{- $destinationConfig := index .destinations .destination }}

# Generate hash for chezmoi run_onchange detection
# Hash: {{ include ".chezmoidata/packages.yaml" | sha256sum }}{{ range $name, $config := .packages.install.arch.packages }}{{ range $config.list }}{{ . }}{{ end }}{{ end }}

    echo "Updating packages for {{ .destination }} destination..."
    
    # Simple error logging function
    log_error() {
        echo "ERROR: $1" >&2
    }
    
    # Check if updates are needed
    if ! (pacman -Qu >/dev/null 2>&1 || (command -v yay >/dev/null 2>&1 && yay -Qu >/dev/null 2>&1)); then
        echo "No updates available. Exiting."
        exit 0
    fi
    
    # Handle linux-firmware transition if needed
    if pacman -Qi linux-firmware >/dev/null 2>&1; then
        current_version=$(pacman -Qi linux-firmware | grep Version | awk '{print $3}' | cut -d'-' -f1)
        current_date=$(echo "$current_version" | cut -d'.' -f1)
        
        if [ "$current_date" -lt "20250613" ]; then
            echo "Handling linux-firmware package transition..."
            sudo pacman -Syu --overwrite="/usr/lib/firmware/nvidia/*" --overwrite="/usr/lib/firmware/amdgpu/*" --overwrite="/usr/lib/firmware/radeon/*" --overwrite="/usr/lib/firmware/intel/*" --noconfirm
        fi
    fi
    
    # Remove conflicting packages
    {{- if .packages.delete.arch }}
    echo "Removing conflicting packages..."
    yay -R --noconfirm {{ .packages.delete.arch }} 2>/dev/null || true
    {{- end }}
    
    # Update system packages
    echo "Updating system packages..."
    if command -v yay >/dev/null 2>&1; then
        yay -Syu --noconfirm
    else
        sudo pacman -Syu --noconfirm
    fi
    
    # Ensure destination packages are installed
    {{- range $name, $config := .packages.install.arch.packages }}
        {{- if has $name $destinationConfig.packages }}
    
    echo "Ensuring {{ $name }} packages are installed..."
    if command -v yay >/dev/null 2>&1; then
        yay -S --noconfirm --needed {{ join " " $config.list }}
    else
        sudo pacman -S --noconfirm --needed {{ join " " $config.list }}
    fi
        {{- end }}
    {{- end }}
    
    echo "âœ“ Package update completed successfully"
    
{{ else }}
    echo "ERROR: Unsupported OS: {{ .osId }}"
    echo "This script requires: linux-arch"
    exit 1
{{ end }}
