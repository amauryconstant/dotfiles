{{ $fullname := promptStringOnce . "fullname" "What is your full name? " -}}
{{ $workEmail := promptStringOnce . "workEmail" "What is your work email address? " -}}
{{ $personalEmail := promptStringOnce . "personalEmail" "What is your personal email address? " -}}
{{ $privateServer := promptStringOnce . "privateServer" "What is the URL of your private server? " -}}
{{ $destination := promptStringOnce . "destination" "What is your installation destination? (test/work/leisure) " -}}
{{- if not (has $destination (list "test" "work" "leisure")) -}}
{{-   $destination = "test" -}}
{{- end -}}
{{ $nameDict := splitn " " 2 $fullname }}

{{- $osid := .chezmoi.os -}}
{{- if hasKey .chezmoi.osRelease "id" -}}
{{-   $osid = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.idLike -}}
{{- end -}}

{{- $chassisType := "desktop" }}
{{- if eq .chezmoi.os "darwin" }}
{{-   if contains "MacBook" (output "sysctl" "-n" "hw.model") }}
{{-     $chassisType = "laptop" }}
{{-   else }}
{{-     $chassisType = "desktop" }}
{{-   end }}
{{- else if eq .chezmoi.os "linux" }}
{{-   $chassisType = (output "hostnamectl" "--json=short" | mustFromJson).Chassis }}
{{- else if eq .chezmoi.os "windows" }}
{{-   $chassisType = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }") | trim }}
{{- end }}


encryption: "age"
age:
    command: "rage"
    identity: "~/.keys/dotfiles-key.txt"
    recipient: "age1qn34rhnnzyav6fe7jk74dyhusl3cjmr3p7e00x99slv0g8gunv3sz4k5re"

edit:
    command: "code"
    args: ["--wait"]

data:
    fullname: {{ $fullname | quote }}
    firstname: {{ $nameDict._0 | quote }}
    workEmail: {{ $workEmail | quote }}
    personalEmail: {{ $personalEmail | quote }}
    privateServer: {{ $privateServer | quote }}
    destination: {{ $destination | quote }}
    osId: {{ $osid | quote }}
    chassisType: {{ $chassisType | quote }}
    currentDesktop: {{ env "XDG_CURRENT_DESKTOP" | quote }}

diff:
  pager: "delta"
  command: "delta"
  args: ["--paging=never"]

merge:
  command: "mergiraf"
  args:
  - "merge"
  - "-v"
  - {{ printf "%q" "{{ .Source }}" }}
  - {{ printf "%q" "{{ .Destination }}" }}
  - {{ printf "%q" "{{ .Target }}" }}
  - "-o"
  - {{ printf "%q" "{{ .Source }}" }}

hooks:
    read-source-state:
        pre:
            command: ".local/share/chezmoi/.chezmoiscripts/.install-password-manager-and-encryption.sh"
