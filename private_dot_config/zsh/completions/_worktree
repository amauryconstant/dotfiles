#compdef worktree

# Git Worktree Management - Zsh Completion
# Dynamic completion with real-time data from main script

_worktree() {
    local context state line ret=1
    local -a subcommands
    
    # Define subcommands with descriptions
    subcommands=(
        'create:Create new worktree with mise integration'
        'switch:Switch between worktrees interactively'
        'status:Show comprehensive worktree status'
        'cleanup:Clean up old worktrees safely'
        'list:Quick worktree listing for scripts'
        'help:Show detailed help information'
    )
    
    # Parse arguments and options
    _arguments -C \
        '--project[Override project name]:project name' \
        '--workspace[Override workspace directory]:workspace:_directories' \
        '(--verbose -v)'{--verbose,-v}'[Enable verbose output]' \
        '(--quiet -q)'{--quiet,-q}'[Suppress non-essential output]' \
        '(--help -h)'{--help,-h}'[Show help information]' \
        '--version[Show version information]' \
        '1: :->subcommand' \
        '*: :->args' && ret=0
    
    case $state in
        subcommand)
            _describe -t subcommands 'worktree subcommand' subcommands && ret=0
            ;;
        args)
            case $line[1] in
                create)
                    _worktree_complete_create && ret=0
                    ;;
                switch|cleanup)
                    _worktree_complete_worktrees && ret=0
                    ;;
                status|list|help)
                    # No additional arguments needed
                    ;;
            esac
            ;;
    esac
    
    return ret
}

# Complete branch names for create subcommand
_worktree_complete_create() {
    local -a branches
    local branch_output
    
    # Get branch suggestions from main script
    branch_output=$(worktree --complete-branches 2>/dev/null)
    
    if [[ -n "$branch_output" ]]; then
        # Convert output to array
        branches=(${(f)branch_output})
        
        # Provide completions with descriptions
        _describe -t branches 'branch name' branches -S '' && return 0
    fi
    
    # Fallback: just accept any input
    _message 'branch name' && return 0
}

# Complete worktree names for switch/cleanup subcommands
_worktree_complete_worktrees() {
    local -a worktrees
    local worktree_output
    
    # Get worktree suggestions from main script
    worktree_output=$(worktree --complete-worktrees 2>/dev/null)
    
    if [[ -n "$worktree_output" ]]; then
        # Convert output to array
        worktrees=(${(f)worktree_output})
        
        # Provide completions
        _describe -t worktrees 'worktree' worktrees -S '' && return 0
    fi
    
    return 1
}

# Enable completion caching for better performance
_worktree_cache_policy() {
    # Rebuild cache if older than 5 minutes
    local -a old
    old=( "$1"(Nm+5) )
    (( $#old )) && return 0
    return 1
}

# Set cache policy
zstyle ':completion::complete:worktree:*' cache-policy _worktree_cache_policy

# Main completion function
_worktree "$@"