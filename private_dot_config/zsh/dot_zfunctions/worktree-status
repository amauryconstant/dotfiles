#!/usr/bin/env zsh

# Show comprehensive status of git worktrees
# Usage: worktree-status

local project workspace_dir worktree_info

# Check if we're in a git repository
if git rev-parse --git-dir >/dev/null 2>&1; then
    project=$(basename $(git rev-parse --show-toplevel))
    workspace_dir="$HOME/Workspaces/$project"
    
    gum style --border double --margin "1" --padding "1 2" --border-foreground "#268bd2" \
        "üìä Worktree Status for: $project" \
        "" \
        "üìÅ Main repository: $(git rev-parse --show-toplevel)" \
        "üåø Current branch: $(git branch --show-current)"
else
    gum style --foreground="#dc322f" "‚ùå Must be run from within a git repository"
    return 1
fi

echo

# Show git worktree list if any exist
if git worktree list | grep -q "worktree"; then
    gum style --foreground="#268bd2" "Git worktrees (from 'git worktree list'):"
    git worktree list
    echo
fi

# Check workspace directory
if [[ ! -d "$workspace_dir" ]]; then
    gum style --foreground="#586e75" "No workspace directory found at: $workspace_dir"
    echo
    gum style --foreground="#586e75" "Tip: Create your first worktree with 'worktree-create <branch-name>'"
    return 0
fi

# Collect detailed worktree information
worktree_data=()
while IFS= read -r line; do
    if [[ -n "$line" ]]; then
        worktree_path=$(echo "$line" | sed 's|/.git||')
        if [[ -d "$worktree_path" ]]; then
            branch_name=$(basename "$worktree_path")
            
            # Get current branch (might be different from directory name)
            current_branch="unknown"
            if cd "$worktree_path" 2>/dev/null; then
                current_branch=$(git branch --show-current 2>/dev/null || echo "detached")
                cd - >/dev/null
            fi
            
            # Check git status
            status_info=""
            if cd "$worktree_path" 2>/dev/null; then
                if git diff --quiet && git diff --cached --quiet; then
                    if git status --porcelain | grep -q .; then
                        status_info="untracked"
                    else
                        status_info="clean"
                    fi
                else
                    status_info="dirty"
                fi
                cd - >/dev/null
            fi
            
            # Get last activity
            last_activity=$(stat -c %Y "$worktree_path" 2>/dev/null || echo "0")
            last_activity_date=$(date -d "@$last_activity" "+%Y-%m-%d" 2>/dev/null || echo "unknown")
            
            # Check if branch exists remotely
            remote_status=""
            if git show-ref --verify --quiet "refs/remotes/origin/$current_branch"; then
                remote_status="tracked"
            else
                remote_status="local-only"
            fi
            
            worktree_data+=("$branch_name|$current_branch|$status_info|$remote_status|$last_activity_date|$worktree_path")
        fi
    fi
done < <(find "$workspace_dir" -name ".git" -type f -o -name ".git" -type d 2>/dev/null)

if [[ ${#worktree_data[@]} -eq 0 ]]; then
    gum style --foreground="#586e75" "No worktrees found in workspace directory"
    return 0
fi

# Display worktree table
gum style --foreground="#268bd2" "üìã Detailed worktree information:"
echo

# Table header
printf "%-20s %-15s %-12s %-12s %-12s %s\n" \
    "DIRECTORY" "BRANCH" "STATUS" "REMOTE" "LAST_USED" "PATH"
printf "%-20s %-15s %-12s %-12s %-12s %s\n" \
    "$(printf '%.0s‚îÄ' {1..20})" \
    "$(printf '%.0s‚îÄ' {1..15})" \
    "$(printf '%.0s‚îÄ' {1..12})" \
    "$(printf '%.0s‚îÄ' {1..12})" \
    "$(printf '%.0s‚îÄ' {1..12})" \
    "$(printf '%.0s‚îÄ' {1..30})"

# Table data
for entry in "${worktree_data[@]}"; do
    IFS='|' read -r dir_name branch_name status_info remote_status last_used path <<< "$entry"
    
    # Color coding for status
    case "$status_info" in
        "clean") status_display="$(gum style --foreground='#859900' '‚óè') clean" ;;
        "dirty") status_display="$(gum style --foreground='#dc322f' '‚óè') dirty" ;;
        "untracked") status_display="$(gum style --foreground='#b58900' '‚óè') untracked" ;;
        *) status_display="$(gum style --foreground='#586e75' '‚óè') $status_info" ;;
    esac
    
    # Color coding for remote status
    case "$remote_status" in
        "tracked") remote_display="$(gum style --foreground='#859900' 'tracked')" ;;
        "local-only") remote_display="$(gum style --foreground='#b58900' 'local-only')" ;;
        *) remote_display="$remote_status" ;;
    esac
    
    printf "%-20s %-15s %-20s %-20s %-12s %s\n" \
        "$dir_name" "$branch_name" "$status_display" "$remote_display" "$last_used" "$path"
done

echo

# Summary
total_worktrees=${#worktree_data[@]}
clean_count=$(printf '%s\n' "${worktree_data[@]}" | grep -c "|clean|" || true)
dirty_count=$(printf '%s\n' "${worktree_data[@]}" | grep -c "|dirty|" || true)

gum style --border rounded --margin "1" --padding "1 2" --border-foreground "#586e75" \
    "üìä Summary" \
    "" \
    "Total worktrees: $total_worktrees" \
    "Clean: $clean_count" \
    "Dirty: $dirty_count" \
    "" \
    "üí° Use 'worktree-switch' to navigate between worktrees" \
    "üí° Use 'worktree-cleanup' to remove old worktrees"