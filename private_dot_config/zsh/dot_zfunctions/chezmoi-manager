#!/usr/bin/env bash

# Chezmoi Manager - Interactive dotfiles management
# Purpose: User-friendly interface for common chezmoi operations
# Requirements: chezmoi, gum

chezmoi-manager() {
    # Check if chezmoi is available
    if ! command -v chezmoi >/dev/null 2>&1; then
        ui_error "chezmoi is not installed or not in PATH"
        return 1
    fi
    
    # Note: Using standardized UI library which handles gum availability
    
    # Note: Using standardized UI library functions instead of custom print_message
    
    # Main interactive loop
    while true; do
        ui_title "🏠 Chezmoi Dotfiles Manager"
        
        ACTION=$(ui_choose "Select an action:" \
            "📊 Status - Check current status" \
            "🔍 Diff - Preview changes" \
            "✅ Apply - Apply changes" \
            "📝 Edit - Edit a managed file" \
            "➕ Add - Add a new file to management" \
            "❌ Remove - Remove file from management" \
            "🔄 Update - Pull from remote and apply" \
            "🧹 Clean - Dry run to see what would be applied" \
            "ℹ️  Info - Show chezmoi configuration" \
            "❓ Help - Show chezmoi help" \
            "🚪 Exit")
        
        case "$ACTION" in
            "📊 Status - Check current status")
                ui_info "Checking chezmoi status..." --after 1
                chezmoi status
                ;;
                
            "🔍 Diff - Preview changes")
                ui_info "Showing differences between current state and target state..." --after 1
                chezmoi diff
                ;;
                
            "✅ Apply - Apply changes")
                # Safety check with confirmation
                local status_output=$(chezmoi status 2>/dev/null)
                if [[ -z "$status_output" ]]; then
                    ui_success "No changes to apply - system is up to date!"
                else
                    ui_warning "The following changes will be applied:" --after 1
                    chezmoi diff | head -20
                    ui_spacer
                    
                    local confirm=false
                    if ui_confirm "Apply these changes?"; then
                        confirm=true
                    fi
                    
                    if [[ "$confirm" == true ]]; then
                        ui_spin "Applying changes..." "chezmoi apply -v"
                        ui_success "Changes applied successfully!"
                    else
                        ui_info "Operation cancelled"
                    fi
                fi
                ;;
                
            "📝 Edit - Edit a managed file")
                local file=$(ui_input "Enter file path to edit" "e.g., ~/.zshrc")
                
                if [[ -n "$file" ]]; then
                    ui_info "Opening $file for editing..."
                    chezmoi edit "$file"
                else
                    ui_error "No file specified"
                fi
                ;;
                
            "➕ Add - Add a new file to management")
                local file=$(ui_input "Enter file path to add to chezmoi" "e.g., ~/.vimrc")
                
                if [[ -n "$file" ]]; then
                    if [[ -f "$file" || -d "$file" ]]; then
                        ui_info "Adding $file to chezmoi management..."
                        if chezmoi add "$file"; then
                            ui_success "Successfully added $file to chezmoi"
                        else
                            ui_error "Failed to add $file to chezmoi"
                        fi
                    else
                        ui_error "File $file does not exist"
                    fi
                else
                    ui_error "No file specified"
                fi
                ;;
                
            "❌ Remove - Remove file from management")
                local file=$(ui_input "Enter file path to remove from chezmoi" "e.g., ~/.vimrc")
                
                if [[ -n "$file" ]]; then
                    local confirm=false
                    if ui_confirm "Remove $file from chezmoi management?"; then
                        confirm=true
                    fi
                    
                    if [[ "$confirm" == true ]]; then
                        if chezmoi forget "$file"; then
                            ui_success "Successfully removed $file from chezmoi management"
                        else
                            ui_error "Failed to remove $file from chezmoi management"
                        fi
                    else
                        ui_info "Operation cancelled"
                    fi
                else
                    ui_error "No file specified"
                fi
                ;;
                
            "🔄 Update - Pull from remote and apply")
                ui_info "Updating from remote repository and applying changes..."
                ui_spin "Updating from remote..." "chezmoi update"
                ui_success "Update completed!"
                ;;
                
            "🧹 Clean - Dry run to see what would be applied")
                ui_info "Performing dry run to show what would be applied..." --after 1
                chezmoi apply --dry-run
                ;;
                
            "ℹ️  Info - Show chezmoi configuration")
                ui_box "ℹ️  Chezmoi Configuration" --after 1
                
                # Format configuration data in a table
                local source_path=$(chezmoi source-path)
                local target_path=$(chezmoi target-path)
                
                echo "Setting|Value" > /tmp/chezmoi_config.txt
                echo "Source Directory|$source_path" >> /tmp/chezmoi_config.txt
                echo "Target Directory|$target_path" >> /tmp/chezmoi_config.txt
                echo "OS|$(chezmoi data | grep -o '"os":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo "unknown")" >> /tmp/chezmoi_config.txt
                echo "Architecture|$(chezmoi data | grep -o '"arch":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo "unknown")" >> /tmp/chezmoi_config.txt
                echo "Hostname|$(chezmoi data | grep -o '"hostname":"[^"]*"' | cut -d'"' -f4 2>/dev/null || echo "unknown")" >> /tmp/chezmoi_config.txt
                
                ui_table < /tmp/chezmoi_config.txt
                rm -f /tmp/chezmoi_config.txt
                
                ui_subtitle "Template Data (showing first 20 lines):" --before 1
                chezmoi data | head -20
                
                if [[ $(chezmoi data | wc -l) -gt 20 ]]; then
                    ui_text "... (use 'chezmoi data' for complete output)" --indent 2
                fi
                ;;
                
            "❓ Help - Show chezmoi help")
                ui_info "Chezmoi help information:" --after 1
                chezmoi help
                ;;
                
            "🚪 Exit"|"")
                ui_info "Goodbye! 👋"
                break
                ;;
                
            *)
                ui_error "Unknown action. Please try again."
                ;;
        esac
        
        # Pause before showing menu again (except for exit)
        if [[ "$ACTION" != "🚪 Exit" && "$ACTION" != "" ]]; then
            ui_text "Press any key to continue..." --before 1
            read -n 1
            ui_spacer
        fi
    done
}