#!/usr/bin/env zsh

# Create a new git worktree with standardized path structure
# Usage: worktree-create [branch-name]

local branch="$1"
local project current_branch worktree_path

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    ui_error "Error: Not in a git repository"
    return 1
fi

project=$(basename $(git rev-parse --show-toplevel))
current_branch=$(git branch --show-current)

# If no branch specified, prompt for it
if [[ -z "$branch" ]]; then
    ui_action "📋 Creating worktree for project: $project" --after 1
    
    # Show available remote branches for reference
    if git branch -r >/dev/null 2>&1; then
        ui_success "Available remote branches:"
        git branch -r --format='%(refname:short)' | sed 's/origin\///' | head -10 | while read -r branch_name; do
            ui_text "$branch_name" --indent 2
        done
        ui_spacer
    fi
    
    branch=$(ui_input "Branch" "Enter branch name (new or existing)")
    
    if [[ -z "$branch" ]]; then
        ui_error "Branch name is required"
        return 1
    fi
fi

worktree_path="$HOME/Workspaces/$project/$branch"

# Check if worktree already exists
if [[ -d "$worktree_path" ]]; then
    ui_warning "Worktree already exists at: $worktree_path"
    
    if ui_confirm "Switch to existing worktree?"; then
        cd "$worktree_path"
        ui_success "Switched to existing worktree"
        return 0
    else
        return 1
    fi
fi

# Create the workspace directory
mkdir -p "$HOME/Workspaces/$project"

# Create the worktree with progress indication
ui_spin "Creating worktree '$branch'..." \
    git worktree add "$worktree_path" "$branch"

if [[ $? -eq 0 ]]; then
    # Handle mise local configuration if present
    local main_repo_path=$(git rev-parse --show-toplevel)
    local mise_configs_found=false
    
    # Only copy local config files (not versioned ones)
    local local_mise_config_files=(
        ".mise.local.toml"
        "mise.local.toml"
    )
    
    # Copy local mise config files that exist
    for config_file in "${local_mise_config_files[@]}"; do
        if [[ -f "$main_repo_path/$config_file" ]]; then
            mise_configs_found=true
            # Create directory structure if needed
            local config_dir=$(dirname "$worktree_path/$config_file")
            mkdir -p "$config_dir" 2>/dev/null || true
            # Copy the config file
            cp -f "$main_repo_path/$config_file" "$worktree_path/$config_file" 2>/dev/null || true
        fi
    done
    
    # Copy local mise directories that may contain local configs
    local local_mise_dirs=(
        ".mise"
        "mise"
    )
    
    for mise_dir in "${local_mise_dirs[@]}"; do
        if [[ -d "$main_repo_path/$mise_dir" ]]; then
            # Only copy local config files from these directories
            if [[ -f "$main_repo_path/$mise_dir/config.local.toml" ]]; then
                mise_configs_found=true
                mkdir -p "$worktree_path/$mise_dir" 2>/dev/null || true
                cp -f "$main_repo_path/$mise_dir/config.local.toml" "$worktree_path/$mise_dir/" 2>/dev/null || true
            fi
        fi
    done
    
    # Trust the directory for mise if any configs exist (versioned or local)
    if command -v mise >/dev/null 2>&1; then
        ui_spin "Trusting mise directory..." \
            "cd '$worktree_path' && mise trust 2>/dev/null || true"
    fi
    
    ui_box "✅ Worktree created successfully!

📁 Location: $worktree_path
🌿 Branch: $branch" --before 1 --after 1
    if ui_confirm "Switch to new worktree now?"; then
        cd "$worktree_path"
        ui_success "Switched to worktree: $(pwd)"
    fi
else
    ui_error "Failed to create worktree"
    return 1
fi