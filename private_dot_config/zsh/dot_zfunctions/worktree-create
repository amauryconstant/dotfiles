#!/usr/bin/env zsh

# Create a new git worktree with standardized path structure
# Usage: worktree-create [branch-name]

local branch="$1"
local project current_branch worktree_path

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    ui_error "Error: Not in a git repository"
    return 1
fi

project=$(basename $(git rev-parse --show-toplevel))
current_branch=$(git branch --show-current)

# If no branch specified, prompt for it
if [[ -z "$branch" ]]; then
    ui_action "üìã Creating worktree for project: $project" --after 1
    
    # Show available remote branches for reference
    if git branch -r >/dev/null 2>&1; then
        ui_success "Available remote branches:"
        git branch -r --format='%(refname:short)' | sed 's/origin\///' | head -10 | while read -r branch_name; do
            ui_text "$branch_name" --indent 2
        done
        ui_spacer
    fi
    
    branch=$(ui_input "Branch" "Enter branch name (new or existing)")
    
    if [[ -z "$branch" ]]; then
        ui_error "Branch name is required"
        return 1
    fi
fi

worktree_path="$HOME/Workspaces/$project/$branch"

# Check if worktree already exists
if [[ -d "$worktree_path" ]]; then
    ui_warning "Worktree already exists at: $worktree_path"
    
    if ui_confirm "Switch to existing worktree?"; then
        cd "$worktree_path"
        ui_success "Switched to existing worktree"
        return 0
    else
        return 1
    fi
fi

# Create the workspace directory
mkdir -p "$HOME/Workspaces/$project"

# Create the worktree with progress indication
ui_spin "Creating worktree '$branch'..." \
    git worktree add "$worktree_path" "$branch"

if [[ $? -eq 0 ]]; then
    ui_box "‚úÖ Worktree created successfully!

üìÅ Location: $worktree_path
üåø Branch: $branch" --before 1 --after 1
    if ui_confirm "Switch to new worktree now?"; then
        cd "$worktree_path"
        ui_success "Switched to worktree: $(pwd)"
    fi
else
    ui_error "Failed to create worktree"
    return 1
fi