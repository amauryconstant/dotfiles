#!/usr/bin/env bash

# Usage: indirect_expand PATH -> $PATH
indirect_expand () {
    env |sed -n "s/^$1=//p"
}

# Usage: pathremove /path/to/bin [PATH]
# Eg, to remove ~/bin from $PATH
#     pathremove ~/bin PATH
pathremove () {
    local IFS=':'
    local newpath
    local dir
    local var="${2:-PATH}"
    # Bash has ${!var}, but this is not portable.
    for dir in $(indirect_expand "$var"); do
        IFS=''
        if [ "$dir" != "$1" ]; then
            newpath=$newpath:$dir
        fi
    done
    export "$var"="${newpath#:}"
}

# Usage: pathprepend /path/to/bin [PATH]
# Eg, to prepend ~/bin to $PATH
#     pathprepend ~/bin PATH
pathprepend () {
    # if the path is already in the variable,
    # remove it so we can move it to the front
    pathremove "$1" "$2"
    #[ -d "${1}" ] || return
    local var="${2:-PATH}"
    local value
    value=$(indirect_expand "$var")
    export "${var}"="${1}${value:+:${value}}"
}

# Usage: pathappend /path/to/bin [PATH]
# Eg, to append ~/bin to $PATH
#     pathappend ~/bin PATH
pathappend () {
    pathremove "${1}" "${2}"
    #[ -d "${1}" ] || return
    local var="${2:-PATH}"
    local value
    value=$(indirect_expand "$var")
    export "$var"="${value:+${value}:}${1}"
}

# Usage: ssource filename
ssource () {
    if [ -r "$1" ]; then
        . "$1"
    fi
}

# Non-interactive system health check
# Usage: system_health_simple [--brief|--help]
system_health_simple() {
    case "$1" in
        --help|-h)
            printf "Usage: system_health_simple [--brief|--help]\n"
            printf "Simple system health check for automation\n"
            printf "\n"
            printf "Options:\n"
            printf "  --brief      Show brief system status (default)\n"
            printf "  --help, -h   Show this help message\n"
            return 0
            ;;
        --brief|"")
            # Brief system status - essential info only
            printf "\033[1;34m=== SYSTEM STATUS ===\033[0m\n"
            
            # Load average
            load_avg=$(uptime | awk -F'load average:' '{print $2}' | sed 's/^[ ]*//g')
            printf "\033[0;36mLoad Average:\033[0m %s\n" "$load_avg"
            
            # Memory usage
            memory_info=$(free -h | awk '/^Mem:/ {printf "%s used / %s total", $3, $2}')
            printf "\033[0;36mMemory:\033[0m %s\n" "$memory_info"
            
            # Disk usage for root
            disk_info=$(df -h / | awk 'NR==2 {printf "%s used / %s total (%s)", $3, $2, $5}')
            printf "\033[0;36mDisk /:\033[0m %s\n" "$disk_info"
            
            # Failed services count
            if command -v systemctl >/dev/null 2>&1; then
                failed_count=$(systemctl list-units --type=service --state=failed --no-legend 2>/dev/null | wc -l)
                if [ "$failed_count" -eq 0 ]; then
                    printf "\033[0;32m✓ All services running normally\033[0m\n"
                else
                    printf "\033[1;33m⚠ %d failed service(s)\033[0m\n" "$failed_count"
                fi
            else
                printf "\033[0;37mService status: systemctl not available\033[0m\n"
            fi
            
            return 0
            ;;
        *)
            printf "\033[0;31mError: Unknown option '%s'\033[0m\n" "$1" >&2
            printf "Use --help for usage information\n" >&2
            return 1
            ;;
    esac
}

# Non-interactive system maintenance
# Usage: system_maintenance_simple [--update|--cleanup|--help]
system_maintenance_simple() {
    case "$1" in
        --help|-h)
            printf "Usage: system_maintenance_simple [--update|--cleanup|--help]\n"
            printf "Simple system maintenance for automation\n"
            printf "\n"
            printf "Options:\n"
            printf "  --update     Update all packages (pacman -Syu)\n"
            printf "  --cleanup    Clean package cache and orphaned packages\n"
            printf "  --help, -h   Show this help message\n"
            printf "\n"
            printf "Without options, shows available maintenance tasks\n"
            return 0
            ;;
        --update)
            printf "\033[1;34m=== SYSTEM UPDATE ===\033[0m\n"
            if command -v pacman >/dev/null 2>&1; then
                printf "\033[0;36mUpdating packages...\033[0m\n"
                if sudo pacman -Syu --noconfirm; then
                    printf "\033[0;32m✓ System update completed\033[0m\n"
                    return 0
                else
                    printf "\033[0;31m✗ System update failed\033[0m\n" >&2
                    return 1
                fi
            else
                printf "\033[0;31mError: pacman not available\033[0m\n" >&2
                return 1
            fi
            ;;
        --cleanup)
            printf "\033[1;34m=== SYSTEM CLEANUP ===\033[0m\n"
            
            # Clean package cache
            if command -v pacman >/dev/null 2>&1; then
                printf "\033[0;36mCleaning package cache...\033[0m\n"
                sudo pacman -Sc --noconfirm >/dev/null 2>&1
            fi
            
            # Remove orphaned packages
            if command -v pacman >/dev/null 2>&1; then
                orphans=$(pacman -Qtdq 2>/dev/null)
                if [ -n "$orphans" ]; then
                    orphan_count=$(echo "$orphans" | wc -l)
                    printf "\033[0;36mRemoving %d orphaned package(s)...\033[0m\n" "$orphan_count"
                    echo "$orphans" | sudo pacman -Rns - --noconfirm >/dev/null 2>&1 || true
                    printf "\033[0;32m✓ Orphaned packages removed\033[0m\n"
                else
                    printf "\033[0;32m✓ No orphaned packages found\033[0m\n"
                fi
            fi
            
            # Clean yay cache if available
            if command -v yay >/dev/null 2>&1; then
                printf "\033[0;36mCleaning AUR cache...\033[0m\n"
                yay -Sc --noconfirm >/dev/null 2>&1 || true
            fi
            
            printf "\033[0;32m✓ System cleanup completed\033[0m\n"
            return 0
            ;;
        "")
            printf "\033[1;34m=== SYSTEM MAINTENANCE ===\033[0m\n"
            printf "Available maintenance options:\n"
            printf "  --update     Update all packages\n"
            printf "  --cleanup    Clean caches and orphaned packages\n"
            printf "  --help       Show detailed help\n"
            printf "\n"
            printf "Usage: system_maintenance_simple [option]\n"
            return 0
            ;;
        *)
            printf "\033[0;31mError: Unknown option '%s'\033[0m\n" "$1" >&2
            printf "Use --help for usage information\n" >&2
            return 1
            ;;
    esac
}
